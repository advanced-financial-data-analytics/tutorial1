---
title: "Tutorial 1- Introduction to Financial Returns"
subtitle: "Understanding Return Calculations and Properties"
embed-resources: true
format:
    html:
        code-fold: true
        toc: true
        toc-depth: 3
        code-tools:
             source: https://github.com/advanced-financial-data-analytics/tutorial1
editor: visual
---

```{r setup, include=FALSE}
# Source setup and data loading scripts
source("setup.r")
source("load_data.r")

# Additional tutorial-specific setup
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  fig.width = 10,
  fig.height = 6
)
```

The goal of this assignment is to introduce you to financial return calculations and their properties, while working with real market data in R. You'll learn to calculate and analyze different types of returns, understand their statistical properties, and explore basic portfolio analysis concepts.

# Getting started

## Prerequisites {data-link="Prerequisites"}

This assignment assumes that you have a basic understanding of financial markets and are familiar with R programming fundamentals. If you need to refresh your R skills, please review the "Introduction to R" materials before continuing.

## Key Concepts

We'll be working with several important financial concepts throughout this assignment:

-   **Simple Returns:** The basic measure of price changes relative to initial investment.

-   **Log Returns:** Also known as continuous compound returns, useful for multi-period analysis.

-   **Portfolio Returns:** Weighted combinations of individual asset returns.

-   **Excess Returns:** Asset returns in excess of a benchmark return.

-   **Volatility:** A measure of return variability and risk.

## Required Packages

For this analysis, we will use the following R packages:

-   **tidyverse**: for data manipulation and visualization
-   **moments**: for calculating statistical moments (skewness, kurtosis)
-   **tseries**: for time series analysis and financial calculations

We use the `library()` function to load packages. The necessary code is provided in the `load-packages` chunk below:

```{r load-packages, message=FALSE}
library(tidyverse)
library(moments)
library(tseries)
```

## Terminology

We've already thrown around a few new terms, so let's define them before we proceed.

-   **R:** Name of the programming language we will be using throughout the course.

-   **Posit:** An integrated development environment for R. In other words, a convenient interface for writing and running R code.

-   **Git:** (Optional) A version control system.

-   **GitHub:** (Optional) A web platform for hosting version controlled files and facilitating collaboration among users.

-   **Repository:** A Git repository contains all of your project's files and stores each file's revision history. It's common to refer to a repository as a repo.

    -   In this course, each assignment you work on will be contained in a Git repo.
    -   For individual assignments, only you will have access to the repo. For team assignments, all team members will have access to a single repo where they work collaboratively.
    -   All repos associated with this course are housed in the course GitHub organization. The organization is set up such that students can only see repos they have access to, but the course staff can see all of them.

## Starting slow

As the course progresses, you are encouraged to explore beyond what the assignments dictate; a willingness to experiment will make you a much better programmer! Before we get to that stage, however, you need to build some basic fluency in R. First, we will explore the fundamental building blocks of these tools.

Before you can get started with the analysis, you need to:

-   Be a member of the course Posit Cloud space (See Canvas Announcements for details)

Optional but recommended: - Have a GitHub account - Learn basics of version control with Git

# Working with Financial Data

## Data Description

We will be working with financial market data from the `fin7028_dat.RData` file, which contains: - Daily stock prices and returns for several companies - Market benchmark data (FTSE 350) - Risk-free rate data

## Data Preparation

Before diving into the main exercises, let's ensure our data is properly prepared:

1.  Load and inspect the data structure
2.  Handle any missing values appropriately
3.  Create basic time series plots
4.  Calculate summary statistics

These preparatory steps are essential for reliable financial analysis.

```{r data-preview}
# Example of data structure
glimpse(glen)  # Glencore stock data
```

# Exercises

## Basic Return Calculations

1.  Using the provided financial data:
    -   Calculate both simple and log returns for Glencore stock
    -   Create a time series plot comparing both types of returns
    -   Explain why the two measures are similar for daily returns but may differ for longer horizons

```{r}
# Example code structure
glen %>%
  mutate(
    simple_return = (adjusted - lag(adjusted)) / lag(adjusted),
    log_return = log(adjusted/lag(adjusted))
  ) %>%
  ggplot(aes(x = date)) +
  geom_line(aes(y = simple_return, color = "Simple")) +
  geom_line(aes(y = log_return, color = "Log")) +
  theme_minimal() +
  labs(title = "Comparison of Simple vs Log Returns",
       y = "Return",
       color = "Return Type")
```

## Multi-Period Returns

2.  For Glencore stock:
    -   Calculate weekly returns using both simple and continuous compounding
    -   Demonstrate the additive property of log returns by comparing:
        a)  The sum of daily log returns
        b)  The directly calculated weekly log return
    -   Discuss any differences you observe

```{r}
# Code template for multi-period returns
# Weekly simple return = (P_t - P_{t-5})/P_{t-5}
# Weekly log return = log(P_t/P_{t-5})
```

## Portfolio Analysis

3.  Create a two-asset portfolio using Glencore and another stock:
    -   Assign weights of 60% and 40% to the assets
    -   Calculate portfolio returns using both simple and log returns
    -   Compare the accuracy of the log return approximation for portfolio returns
    -   Explain why simple returns are preferred for portfolio calculations

## Excess Returns and Performance

4.  Using the FTSE 350 as the benchmark:
    -   Calculate excess returns for your chosen stock
    -   Create a visualization showing:
        a)  The stock's returns
        b)  The benchmark returns
        c)  The excess returns
    -   Calculate and interpret the tracking error

## Statistical Properties

5.  Analyze the distributional properties of the returns:
    -   Create histograms of daily returns
    -   Calculate and interpret:
        a)  Skewness
        b)  Kurtosis
        c)  Jarque-Bera test for normality
    -   What do these results tell us about the nature of financial returns?

```{r}
# Example code for statistical analysis
returns_stats <- glen %>%
  summarise(
    mean_return = mean(log_return, na.rm = TRUE),
    std_dev = sd(log_return, na.rm = TRUE),
    skewness = moments::skewness(log_return, na.rm = TRUE),
    kurtosis = moments::kurtosis(log_return, na.rm = TRUE)
  )
```

## HOMEWORK: Volatility Analysis

6.  Examine volatility clustering in the returns:
    -   Create a plot of absolute returns
    -   Calculate rolling 30-day volatility
    -   Test for ARCH effects in the return series
    -   What does this tell us about the time-varying nature of risk?

# Submission Guidelines

-   Your analysis should include both code and written explanations
-   All visualizations should be properly labeled with titles and axes
-   Include your interpretation of the results in the context of financial markets
-   Remember to handle missing values appropriately in your calculations

::: callout-note
Pay particular attention to the assumptions underlying each return calculation method and their implications for financial analysis.
:::